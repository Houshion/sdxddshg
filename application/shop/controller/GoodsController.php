<?php
/**
 * Created by PhpStorm.
 * User: 韩令恺
 * Date: 2018/5/23 0023
 * Time: 20:20
 */

namespace app\shop\controller;
use Think\Db;
use think\Session;

class GoodsController extends BaseController
{
    public $url = '';
    public $authStatus = array(0 => '未认证', 1 => '已认证');
    public $id;
    public $type;

    public function _initialize()
    {
        parent::_initialize();
        // TODO: Change the autogenerated stub
        $this->url = request()->root(true) . '/public/';
        $aid = Session::get('MMS.uid');
        if ($this->type == 1) {
            $this->id = Db::name('shop')->where(['aid' => $aid])->value('shop_id');//商家ID
        } else {
            $this->id = $aid;//员工ID
        }
    }


    //商品列表
    public function index()
    {
        $condition = null;
        if ($_GET['title']) {
            $condition['title'] = ['like', '%' . trim($_GET['title']) . '%'];
            $this->assign('title', $_GET['title']);
        }

        if ($_GET['type_id']) {
            $condition['a.type_id'] = $_GET['type_id'];
            $this->assign('type_id', $_GET['type_id']);
        }
        $condition['a.shop_id'] = $this->shop_id;
        $pagesize =  self::$MMS['set']['pagesize']?:20;
        $page = input('page') ? input('page') : 1;
//        $result = model('goods')->get_list($condition, '*', $page, $pagesize);
//        $result = $result->toArray();
        $result = db('goods')->alias('a')->join('dlc_goods_time b','a.goods_id=b.goods_id','left')->where($condition)->field('a.*,b.sale')->page($page, $pagesize)->select();

        foreach ($result as $k => $v) {
            $goodsType = model('goodsType')->get_row(['type_id' => $v['type_id']]);
            $result[$k]['type'] = $goodsType['type'];
            $result[$k]['img'] = $this->url . $v['img'];
            $result[$k]['weight'] = round($v['weight'], 2);
        }
        $count = db('goods')->alias('a')->join('dlc_goods_time b','a.goods_id=b.goods_id','left')->where($condition)->count();
        $this->getPage($count, $pagesize, 'App-loader', '商品类型列表', 'App-search');
        $typeList = model('goodsType')->get_list();
        $this->assign('typeList', $typeList);
        $this->assign('result', $result);
        echo $this->fetch();
    }
    //弹出提示框
    public function goodshtml(){
        $goods_id=  input('goods_id');
        $this->assign('goods_id',$goods_id);
        echo $this->fetch('');
        exit;
    }
    //批量商品修改价格
    public function totalsavegoods(){
        db()->startTrans();
        $goods_id= trim(input('goods_id'),',');
        $new_price= input('new_price');
        $new_cost_price= input('new_cost_price');
        if(empty($new_cost_price)){
            $info['status'] = 0;
            $info['msg'] = '成本价不能为空！';
            return($info);
        }
        if(empty($new_price)){
            $info['status'] = 0;
            $info['msg'] = '售价不能为空！';
            return($info);
        }
        $data=array();
        $where['goods_id']=['in',$goods_id];
        $list= db('goods')->where($where)->select();

        foreach ($list as $k=>$v){
            $data[$k]['goods_id']=$v['goods_id'];
            $data[$k]['new_price']=$new_price;
            $data[$k]['new_cost_price']=$new_cost_price;
            $data[$k]['old_cost_price']=$v['cost'];
            $data[$k]['old_price']=$v['price'];
            $data[$k]['aid']=$this->uid;
            $data[$k]['shop_id']=$this->shop_id;
            $data[$k]['ctime']=time();

        }
        $res1=db('goods_update_price')->insertAll($data);
        $res2= db('device_goods')->where($where)->update(['price'=>$new_price]);
        $res3= db('goods')->where($where)->update(['cost'=>$new_cost_price,'price'=>$new_price]);
        if($res1&&$res2&&$res3){
          db()->commit();
            $info['status'] = 1;
            $info['msg'] = '修改成功！';

        }else{
            db()->rollback();
            $info['status'] = 0;
            $info['msg'] = '修改失败！';
        }
        return($info);

    }
    //增加/修改商品
    public function edit()
    {

        $goods_id = input('goods_id');
        $post = $_POST;

        if ($post) { //有交互数据
            if ($goods_id) { //修改
                $goodsData = array(
                    'title' => $post['title'],
                    'img' => $post['img'],
                    'type_id' => $post['type_id'],
                    'weight' => $post['weight'],
                    'price' => $post['price'],
                    'unit' => $post['unit'],
                    'cost' => $post['cost'],
                    'shop_id' =>$this->id

                );
                $result = model('goods')->get_update(['goods_id' => $goods_id], $goodsData);

                if ($post['rfid']) {
//                    print_r($post);
//                    die;
                    $rfidArr = explode(',', $post['rfid']);
                    foreach ($rfidArr as $k => $v) {
                       $rfidfind= db('rfid')->where('rfid',trim($v))->find();
                       if(empty($rfidfind)){
                        $rfidData = array(
                            'rfid' => trim($v),
                            'goods_id' => $goods_id,
                            'ctime' => time(),
                            'status' => 1,
                            'shop_id' =>$this->id
                        );
                           Db::name('rfid')->insert($rfidData);
//                           try {
//                               Db::name('rfid')->insert($rfidData);
//                           } catch (\Exception $err) {
//
//                           }
                       }else{
                           if($rfidfind['status']==1){
                               $rfidData = array(
                                   'goods_id' => $goods_id,
                                   'ctime' => time(),
                                   'status' => 1
                               );
                               Db::name('rfid')->where('rfid',trim($v))->update($rfidData);
                           }else{
                               continue;
                           }//
                       }
                    }
                }
                $data['goods_id']=$goods_id;
                $data['txt']='修改商品id--'.$goods_id.'--商品名修改后--'.$post['title'];
                $data['rfid']=$post['rfid'];
                $data['aid']=$this->uid;
                $data['ctime']=time();
                db('log')->insert($data);
                $info['status'] = 1;
                $info['msg'] = '修改成功';
//                if ($result) {
//                    $info['status'] = 1;
//                    $info['msg'] = '修改成功';
//                } else {
//                    $info['status'] = 0;
//                    $info['msg'] = '修改失败';
//                }
                return ($info);

            } else { //新增

                $goodsData = array(
                    'title' => $post['title'],
                    'img' => $post['img'],
                    'type_id' => $post['type_id'],
                    'weight' => $post['weight'],
                    'price' => $post['price'],
                    'unit' => $post['unit'],
                    'cost' => $post['cost'],
                    'shop_id' =>$this->id
                );
                $goodsId = Db::name('goods')->insertGetId($goodsData);
                if ($post['rfid']) {
                    $rfidArr = explode(',', $post['rfid']);

                    foreach ($rfidArr as $k => $v) {
                        $rfidfind= db('rfid')->where('rfid',trim($v))->find();
                        if(empty($rfidfind)){
                            $rfidData = array(
                                'rfid' => trim($v),
                                'goods_id' => $goodsId,
                                'ctime' => time(),
                                'status' => 1,
                                'shop_id' =>$this->id
                            );
                            Db::name('rfid')->insert($rfidData);
//                            try {
//                                Db::name('rfid')->insert($rfidData);
//                            } catch (\Exception $err) {
//
//                            }
                        }else{
                            continue;
                        }
//                        $rfidData = array(
//                            'rfid' => trim($v),
//                            'goods_id' => $goodsId,
//                            'ctime' => time(),
//                            'status' => 1,
//                            'shop_id' =>$this->id
//                        );
////                        print_r($rfidData);
////                        die;E20000178719008622502F49,E20000177707010723502448
//                        try {
//                            Db::name('rfid')->insert($rfidData);
//                        } catch (\Exception $err) {
//
//                        }
                        $data['goods_id']=$goods_id;
                        $data['txt']='新增商品id--'.$goods_id.'--商品名新增名--'.$post['title'];
                        $data['rfid']=$post['rfid'];
                        $data['aid']=$this->uid;
                        $data['ctime']=time();
                        db('log')->insert($data);
                    }
                }
                if ($goodsId) {
                    $info['status'] = 1;
                    $info['msg'] = '添加成功';
                } else {
                    $info['status'] = 0;
                    $info['msg'] = '添加失败';
                }
                return ($info);
            }

        } else { //无交互数据

            //设置面包导航，主加载器请配置
            $bread = array(
                '0' => array(
                    'name' => '用户分类列表',
                    'url' => url('shop/goods/goodsType'),
                ),
                '1' => array(
                    'name' => '商品分类编辑',
                    'url' => url('shop/user/index')
                ),
            );
            $this->assign('breadhtml', $this->getBread($bread));

            $goodsType = model('goodsType')->get_list();
            $this->assign('goodsType', $goodsType);

            if ($goods_id) { //修改模板
                $result = model('goods')->get_row(['goods_id' => $goods_id], '*');
                $this->assign('result', $result);
            }
            echo $this->fetch();
        }

    }


    //删除商品
    public function delete(){
        $goods_id = input('goods_id');
        if (!$goods_id) {
            $info['status'] = 0;
            $info['msg'] = 'ID不能为空!';
            return($info);
        }
        $where['goods_id']=$goods_id;
        $where['status']=['in',[1,2]];
        $list= db('rfid')->where($where)->select();
        if($list){
            $info['status'] = 0;
            $info['msg'] = '该商品还有标签绑定，先删除标签，在删除商品';
            return($info);
        }
        $res = model('goods')->get_delete(['goods_id'=>$goods_id]);
        if ($res){
            $data['goods_id']=$goods_id;
            $data['txt']='删除商品id--'.$goods_id;
            $data['aid']=$this->uid;
            $data['ctime']=time();
            db('log')->insert($data);
            $info['status'] = 1;
            $info['msg'] = '删除成功';
        }else{
            $info['status'] = 0;
            $info['msg'] = '删除失败';
        }
        return($info);
    }

    //删除商品
    public function rfiddel(){
        $rfid = input('rfid');
        if (!$rfid) {
            $info['status'] = 0;
            $info['msg'] = 'ID不能为空!';
            return($info);
        }
        $find= db('rfid')->where(['rfid'=>$rfid])->find();
        $data['goods_id']=$find['goods_id'];
        $res=db('rfid')->where(['rfid'=>$rfid])->delete();
        if ($res){
            $data['txt']='删除商品rfid--'.$rfid.'--设备id--'.$find['device_id'].'--商家id--'.$find['shop_id'].'--状态--'.$find['status'].'--创建时间--'.date('Y-m-d H:i:s',$find['ctime']);
            $data['aid']=$this->uid;
            $data['ctime']=time();
            $info['status'] = 1;
            $info['msg'] = '删除成功';
        }else{
            $info['status'] = 0;
            $info['msg'] = '删除失败';
        }
        return($info);
    }
    //删除商品（多条）
    public function clear(){
        $goodsIdArr = explode(',',substr(input('goods_id'),0,strlen(input('goods_id'))-1));
        $res = model('goods')->get_delete(['goods_id'=>['in',$goodsIdArr]]);
        if ($res){
            $info['status'] = 1;
            $info['msg'] = '清除成功';
        }else{
            $info['status'] = 0;
            $info['msg'] = '清除失败';
        }
        return($info);
    }



    //商品类型列表
    public function goodsType(){
        $condition = null;
        if ($_GET['type']){
            $condition['type'] = ['like','%'.$_GET['type'].'%'];
            $this->assign('type',$_GET['type']);
        }

        $pagesize =self::$MMS['set']['pagesize']?:20;
        $page = input('page')?input('page'):1;
        $result = model('goodsType')->get_list($condition,'*',$page,$pagesize);
        $count = model('goodsType')->get_count($condition);
        $this->getPage($count, $pagesize, 'App-loader', '商品类型列表', 'App-search');
        $this->assign('result',$result);
        echo $this->fetch('goodsType');
    }


    //增加/修改商品类型
    public function editGoodsType(){
        $type_id = input('type_id');
        $post = $_POST;
        //设置面包导航，主加载器请配置
        $bread = array(
            '0' => array(
                'name' => '用户分类列表',
                'url' => url('shop/goods/goodsType'),
            ),
            '1' => array(
                'name' => '商品分类编辑',
                'url' => url('shop/user/index')
            ),
        );
        $this->assign('breadhtml', $this->getBread($bread));

        if ($post){ //有交互数据
            if ($type_id){ //修改
                $typeData = array(
                    'type'  =>  $post['type'],
                    'memo'  =>  $post['memo'],
                    'shop_id'=>$this->shop
                );
                $result = model('goodsType')->get_update(['type_id'=>$type_id],$typeData);
                if ($result){
                    $info['status'] = 1;
                    $info['msg'] = '修改成功';
                }else{
                    $info['status'] = 0;
                    $info['msg'] = '修改失败';
                }
                return($info);

            }else{ //新增

                $typeData = array(
                    'type'  =>  $post['type'],
                    'memo'  =>  $post['memo'],
                    'ctime' =>  time()
                );
                $result = model('goodsType')->get_insert($typeData);
                if ($result){
                    $info['status'] = 1;
                    $info['msg'] = '添加成功';
                }else{
                    $info['status'] = 0;
                    $info['msg'] = '添加失败';
                }
                return($info);
            }

        }else{ //无交互数据

            if ($type_id){ //修改模板
                $result = model('goodsType')->get_row(['type_id'=>$type_id],'*');
                $this->assign('result',$result);
            }
            echo $this->fetch('editGoodsType');
        }
    }

    //删除商品类型
    public function deleteGoodsType(){
        $type_id = input('type_id');
        if (!$type_id) {
            $info['status'] = 0;
            $info['msg'] = 'ID不能为空!';
            return($info);
        }
        $res = model('goodsType')->get_delete(['type_id'=>$type_id]);
        if ($res){
            $info['status'] = 1;
            $info['msg'] = '删除成功';
        }else{
            $info['status'] = 0;
            $info['msg'] = '删除失败';
        }
        return($info);
    }
    //商品改价记录列表
    public function savegoodslist(){
        //设置面包导航，主加载器请配置
        $bread = array(
            '0' => array(
                'name' => '商品管理',
                'url' => url('shop/goods/index'),
            ),
            '1' => array(
                'name' => '商品改价记录列表',
                'url' => url('shop/goods/savegoodslist')
            ),
        );
        $this->assign('breadhtml', $this->getBread($bread));
        $pagesize = self::$MMS['set']['pagesize']?:20;
        $page = input('page')?input('page'):1;
        $title= trim(input('title'))?:"";
        $play_time = input('play_time') ? input('play_time') : '';
        if($title){
            $where['b.title']=['like',"%$title%"];
            $this->assign('title',$title);
        }
//        if(strtotime($start_time)>strtotime($end_time)){
//            $info['status'] = 0;
//            $info['msg'] = '开始时间不能大于结束时间';
//            return($info);
//        }

        if ($play_time) {
            $timeArr = explode(" - ", $play_time);
            if (count($timeArr) < 2) {
                $timeArr = explode("+-+", $play_time);
            }
            $stime = strtotime(date('Y-m-d', strtotime($timeArr[0])));
            $etime = strtotime(date('Y-m-d', strtotime($timeArr[1])) . "23:59:59");
            $where['a.ctime'] = array('between', array($stime, $etime));
            $this->assign('play_time', $play_time);
        }
        $where['a.shop_id']=$this->shop_id;
        $list= db('goods_update_price')->alias('a')
            ->join('dlc_goods b','a.goods_id=b.goods_id','left')
            ->join('dlc_admin c','c.id=a.aid','left')
            ->where($where)
            ->field('a.*,b.title,c.nickname')
            ->page($page,$pagesize)->order('ctime desc')->select();
        $count= db('goods_update_price')->alias('a')
            ->join('dlc_goods b','a.goods_id=b.goods_id','left')
            ->join('dlc_admin c','c.id=a.aid','left')->where($where)->count();
        $this->assign('empty','<tr><td colspan="15" style="line-height:32px;text-align:center;">暂无数据！</td></tr>');
        $this->getPage($count, $pagesize, 'App-loader', '商品改价记录列表', 'App-search');
        $this->assign('list',$list);
        echo $this->fetch('');
    }

    //删除商品类型 (多选)
    public function clearGoodsType(){
        $typeIdArr = explode(',',substr(input('type_id'),0,strlen(input('type_id'))-1));
        $res = model('goodsType')->get_delete(['type_id'=>['in',$typeIdArr]]);
        if ($res){
            $info['status'] = 1;
            $info['msg'] = '清除成功';
        }else{
            $info['status'] = 0;
            $info['msg'] = '清除失败';
        }
        return($info);
    }


    /**
     *读取ifid 直接取出文本数据
     */
//    public function get_rfid(){
//        $file_path = $_FILES['pic']['tmp_name'];
//        if ($file_path) {
//            if(file_exists($file_path)){
//                if (!strpos($_FILES['pic']['name'],'txt')){
//                  abort(json(['data'=>'','msg'=>'文件格式错误','code'=>2]));
//                };
//                $str = file_get_contents($file_path);
//
//                abort(json(['data' =>$str, 'msg' => '获取成功！', 'code' => 1]));
//            }
//        }
//        abort(json(['data' =>'', 'msg' => '获取失败！', 'code' => 0]));
//    }
    /**
     *读取ifid 截取文本数据
     */
    public function get_rfid(){
        $file_path = $_FILES['pic']['tmp_name'];
        if ($file_path) {
            if(file_exists($file_path)){
                $str = "";
                $file_arr = file($file_path);
//                print_r($file_arr);
                foreach($file_arr as $key => $value){
//                    if ($key==0) {
//                        continue;
//                    }
                    $arr = explode(",",$value);
                    $str .= str_replace(' ', '', $arr[0]).',';
                }

//                print_r($str);
                abort(json(['data' =>rtrim($str,','), 'msg' => '获取成功！', 'code' => 1]));
            }
        }
        abort(json(['data' =>'', 'msg' => '获取失败！', 'code' => 0]));
    }
    //rfid列表
    public function rfidlist(){
        //设置面包导航，主加载器请配置
        $bread = array(
            '0' => array(
                'name' => '商品管理',
                'url' => url('shop/goods/index'),
            ),
            '1' => array(
                'name' => 'rfid列表',
                'url' => url('shop/goods/rfid')
            ),
        );
        if ($_GET['rfid']){
            $where['a.rfid'] = ['like','%'.$_GET['rfid'].'%'];
            $this->assign('rfid',$_GET['rfid']);
        }

        if ($_GET['status']){
            $where['a.status'] = $_GET['status'];
            $this->assign('status',$_GET['status']);
        }
        $goodsname = trim(input('goodsname'));
        $devicename = trim(input('devicename'));
        if ($goodsname){
            $where['b.title'] = ['like','%'.$goodsname.'%'];
            $this->assign('goodsname',$goodsname);
        }
        if ($devicename){
            $where['c.title'] = ['like','%'.$devicename.'%'];
            $this->assign('devicename',$devicename);
        }
        if(empty($where)){
            // $where = "1 = 1";
        }
        if($this->type == 1){
            $where['a.shop_id'] = $this->id;
        }
        else{
             $where['c.user_id'] = $this->id;
        }
        $this->assign('breadhtml', $this->getBread($bread));
        $pagesize = self::$MMS['set']['pagesize']?:20;

        $page = input('page')?input('page'):1;
        $list = Db::name('rfid')
            ->alias('a')
            ->join("dlc_goods b","a.goods_id = b.goods_id","left")
            ->join("dlc_device c","a.device_id = c.device_id","left")
            ->join("dlc_shop d","a.shop_id = c.shop_id","left")
            ->where($where)
            ->field("a.*,b.title as goodsname,c.title as devicename,d.user_name as shopname")
            ->page($page,$pagesize)
            ->group('a.rfid')
            ->select();

        $count = Db::name('rfid')
            ->alias('a')
            ->join("dlc_goods b","a.goods_id = b.goods_id","left")
            ->join("dlc_device c","a.device_id = c.device_id","left")
            ->join("dlc_shop d","a.shop_id = c.shop_id","left")
            ->where($where)
            ->count('distinct(a.rfid)');
        $this->getPage($count, $pagesize, 'App-loader', 'rfid列表', 'App-search');
        $this->assign('list',$list);
        echo $this->fetch('rfidlist');
    }

    //商品对应rfid列表
    public function rfid(){
        $goods_id = input("goods_id");
        //设置面包导航，主加载器请配置
        $bread = array(
            '0' => array(
                'name' => '商品管理',
                'url' => url('shop/goods/index'),
            ),
            '1' => array(
                'name' => 'rfid列表',
                'url' => url('shop/goods/rfid')
            ),
        );
        $this->assign('breadhtml', $this->getBread($bread));
        $pagesize = self::$MMS['set']['pagesize']?:20;
        $page = input('page')?input('page'):1;
        $condition['a.goods_id']=$goods_id;
        $list = Db::name('rfid')
            ->alias('a')
            ->join("dlc_goods b","a.goods_id = b.goods_id","left")
            ->join("dlc_device c","a.device_id = c.device_id","left")
            ->join("dlc_shop d","a.shop_id = c.shop_id","left")
            ->where($condition)
            ->field("a.*,b.title as goodsname,c.title as devicename,d.user_name as shopname")
            ->page($page,$pagesize)
            ->group('a.rfid')
            ->select();
        $count = Db::name('rfid')
            ->alias('a')
            ->join("dlc_goods b","a.goods_id = b.goods_id","left")
            ->join("dlc_device c","a.device_id = c.device_id","left")
            ->join("dlc_shop d","a.shop_id = c.shop_id","left")
            ->where($condition)
            ->count();
        $this->getPage($count, $pagesize, 'App-loader', 'rfid列表', 'App-search');
        $this->assign('list',$list);
        echo $this->fetch('rfid');
    }

    //rfid更改
    public function rfidedit(){
        $rfidname = input("rfid");
        $goods  = Db::name("goods")->order('goods_id desc')->select();
        $device = Db::name("device")->order('device_id desc')->select();
        $rfid = Db::name("rfid")->where("rfid",$rfidname)->find();
        $this->assign('rfid',$rfid);
        $this->assign('goods',$goods);
        $this->assign('device',$device);
        echo $this->fetch('rfidedit');
    }

    //rfid更改状态
    public function rfidStatus(){
        $rfidname = input("rfid");
        $status = input("status");
        $where["rfid"] = array("IN",$rfidname);
        $re = Db::name("rfid")->where($where)->update(array("status"=>$status));
        if ($re !== false){
            $info['status'] = 1;
            $info['msg'] = '设置成功';
        }else{
            $info['status'] = 0;
            $info['msg'] = '设置失败';
        }
        return($info);
    }
    //导出
    public function exportgoods(){
        // 导出Exl
        import("Org.Util.PHPExcel");
        import("Org.Util.PHPExcel.Worksheet.Drawing");
        import("Org.Util.PHPExcel.Writer.Excel2007");
        $objPHPExcel = new \PHPExcel();
        $objWriter = new \PHPExcel_Writer_Excel2007($objPHPExcel);
        $objActSheet = $objPHPExcel->getActiveSheet();

        $where = array();

        $play_time = $_GET['play_time']?:'';
        $title= $_GET['title']?:'';
        if($title){
            $where['b.title']=['like',"%$title%"];
            $this->assign('title',$title);
        }

        if ($play_time) {
            $timeArr = explode(" - ", $play_time);
            if (count($timeArr) < 2) {
                $timeArr = explode("+-+", $play_time);
            }
            $stime = strtotime(date('Y-m-d', strtotime($timeArr[0])));
            $etime = strtotime(date('Y-m-d', strtotime($timeArr[1])) . "23:59:59");
            $where['a.ctime'] = array('between', array($stime, $etime));
        }


        $where['a.shop_id']=$this->shop_id;
        $list= db('goods_update_price')->alias('a')
            ->join('dlc_goods b','a.goods_id=b.goods_id','left')
            ->join('dlc_admin c','c.id=a.aid','left')
            ->where($where)
            ->field('a.*,b.title,c.nickname')
           ->order('ctime desc')->select();

        foreach ($list as $k => $v){
            $list[$k]['ctime'] = date("Y-m-d H:i",$v['ctime']);

        }

        // 水平居中（位置很重要，建议在最初始位置）
        $objPHPExcel->setActiveSheetIndex(0)->getStyle('A')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle('B')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle('C')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle('D')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle('E')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle('F')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle('G')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $objPHPExcel->setActiveSheetIndex(0)->getStyle('H')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('I')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('J')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('K')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('L')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('M')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('N')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('O')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('P')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('Q')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('R')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('S')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
//        $objPHPExcel->setActiveSheetIndex(0)->getStyle('T')->getAlignment()->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER);

        $objActSheet->setCellValue('A1', 'ID');
        $objActSheet->setCellValue('B1', '商品名称');
        $objActSheet->setCellValue('C1', '商品原成本价');
        $objActSheet->setCellValue('D1', '商品原售价');
        $objActSheet->setCellValue('E1', '商品新成本价');
        $objActSheet->setCellValue('F1', '商品新售价');
        $objActSheet->setCellValue('G1', '修改人');
        $objActSheet->setCellValue('H1', '时间');
//        $objActSheet->setCellValue('J1', '退房时间');
//        $objActSheet->setCellValue('K1', '天数');
//        $objActSheet->setCellValue('L1', '状态');
//        $objActSheet->setCellValue('M1', '创建时间');
//        $objActSheet->setCellValue('N1', '完成时间');
//        $objActSheet->setCellValue('O1', '姓名');
//        $objActSheet->setCellValue('P1', '手机号码');
//        $objActSheet->setCellValue('Q1', '身份证号码');
//        $objActSheet->setCellValue('R1', '身份证正面');
//        $objActSheet->setCellValue('S1', '身份证反面');
//        $objActSheet->setCellValue('T1', '自拍照');

        // 设置个表格宽度
        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(25);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(16);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(12);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(12);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(12);
        $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(20);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(12);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(12);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(12);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(12);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(18);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(12);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(12);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(30);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(30);
//        $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(30);


        // 垂直居中
        $objPHPExcel->getActiveSheet()->getStyle('A')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle('B')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle('C')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle('D')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle('E')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle('F')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle('G')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $objPHPExcel->getActiveSheet()->getStyle('H')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('I')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('J')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('K')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('L')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('M')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('N')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('O')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('P')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('Q')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('R')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('S')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);
//        $objPHPExcel->getActiveSheet()->getStyle('T')->getAlignment()->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);

        foreach($list as $k=>$v){
            $k +=2;
            $objActSheet->setCellValue('A'.$k, $v['manage_id']);
            $objActSheet->setCellValue('B'.$k, $v['title']);
            $objActSheet->setCellValue('C'.$k, $v['old_cost_price']);
            $objActSheet->setCellValue('D'.$k, $v['old_price']);
            $objActSheet->setCellValue('E'.$k, $v['new_cost_price']);
            $objActSheet->setCellValue('F'.$k, $v['new_price']);
            $objActSheet->setCellValue('G'.$k, $v['nickname']);
            $objActSheet->setCellValue('H'.$k, $v['ctime']);
//            $objActSheet->setCellValue('I'.$k, $v['use_time']);
//            $objActSheet->setCellValue('J'.$k, $v['leave_time']);
//            $objActSheet->setCellValue('K'.$k, $v['day_num']);
//            $objActSheet->setCellValue('L'.$k, $v['order_status']);
//            $objActSheet->setCellValue('M'.$k, $v['ctime']);
//            $objActSheet->setCellValue('N'.$k, $v['completion_time']);
//            $objActSheet->setCellValue('O'.$k, $v['housing_name']);
//            $objActSheet->setCellValue('P'.$k, $v['mobile']);
//            $objActSheet->setCellValue('Q'.$k, $v['id_number']);
//            $objActSheet->setCellValue('R'.$k, $v['id_front']);
//            $objActSheet->setCellValue('S'.$k, $v['id_back']);
//            $objActSheet->setCellValue('T'.$k, $v['selfie']);

            // 图片生成
//            if($v['id_front']){
//                $objDrawing = new \PHPExcel_Worksheet_Drawing();
//                $objDrawing->setPath($v['id_front']);
//                // 设置宽度高度
//                $objDrawing->setHeight(80);//照片高度
//                $objDrawing->setWidth(80); //照片宽度
//                /*设置图片要插入的单元格*/
//                $objDrawing->setCoordinates('R'.$k);
//                // 图片偏移距离
//                $objDrawing->setOffsetX(12);
//                $objDrawing->setOffsetY(12);
//                $objDrawing->setWorksheet($objPHPExcel->getActiveSheet());
//            }else{
//                $objActSheet->setCellValue('R'.$k,'还未上传身份证正面');
//            }


//            if($v['id_front']){
//                // 图片生成
//                $objDrawing = new \PHPExcel_Worksheet_Drawing();
//                $objDrawing->setPath($v['id_back']);
//                // 设置宽度高度
//                $objDrawing->setHeight(80);//照片高度
//                $objDrawing->setWidth(80); //照片宽度
//                /*设置图片要插入的单元格*/
//                $objDrawing->setCoordinates('S'.$k);
//                // 图片偏移距离
//                $objDrawing->setOffsetX(12);
//                $objDrawing->setOffsetY(12);
//                $objDrawing->setWorksheet($objPHPExcel->getActiveSheet());
//            }else{
//                $objActSheet->setCellValue('S'.$k,'还未上传身份证反面');
//            }


//            if($v['selfie']){
//                // 图片生成
//                $objDrawing = new \PHPExcel_Worksheet_Drawing();
//                $objDrawing->setPath($v['selfie']);
//                // 设置宽度高度
//                $objDrawing->setHeight(80);//照片高度
//                $objDrawing->setWidth(80); //照片宽度
//                /*设置图片要插入的单元格*/
//                $objDrawing->setCoordinates('T'.$k);
//                // 图片偏移距离
//                $objDrawing->setOffsetX(12);
//                $objDrawing->setOffsetY(12);
//                $objDrawing->setWorksheet($objPHPExcel->getActiveSheet());
//            }else{
//                $objActSheet->setCellValue('T'.$k,'还未上传自拍');
//            }

            // 表格高度
            $objActSheet->getRowDimension($k)->setRowHeight(80);

        }
        $fileName = '商品改价记录';
        $date = date("Y-m-d",time());
        $fileName .= "_{$date}.xls";
        $fileName = iconv("utf-8", "gb2312", $fileName);
        //重命名表
        // $objPHPExcel->getActiveSheet()->setTitle('test');
        //设置活动单指数到第一个表,所以Excel打开这是第一个表
        $objPHPExcel->setActiveSheetIndex(0);
        header('Content-Type: application/vnd.ms-excel');
        header("Content-Disposition: attachment;filename=\"$fileName\"");
        header('Cache-Control: max-age=0');
        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output'); //文件通过浏览器下载
        // END
    }

    //商品折扣
    public function salelist(){
        //设置面包导航，主加载器请配置
        $bread = array(
            '0' => array(
                'name' => '商品管理',
                'url' => url('shop/goods/index'),
            ),
            '1' => array(
                'name' => '时间折扣列表',
                'url' => url('shop/goods/salelist')
            ),
        );
        $this->assign('breadhtml', $this->getBread($bread));
        $pagesize = self::$MMS['set']['pagesize']?:20;
        $page = input('page')?input('page'):1;
        $map['shop_id']=$this->shop_id;
        $lsit=db('shop_time')->where($map)->page($page,$pagesize)->select();

//        foreach ($lsit as $k=>$v){
//
    //                $where['start_time']=['<=',date('H:i',time())];
    //                $where['end_time']=['>=',date('H:i',time())];
//            $sql=db('shop_time')->where($where)->fetchSql()->find();
//            print_r($sql);
//        }
        $count=db('shop_time')->where($map)->count();
        $this->getPage($count, $pagesize, 'App-loader', '时间折扣列表', 'App-search');
        $this->assign('empty','<tr><td colspan="15" style="line-height:32px;text-align:center;">暂无数据！</td></tr>');
        $this->assign('list',$lsit);
        echo $this->fetch('');


    }
    //商品折扣添加
    public function  saleadd(){
        $post = $_POST;
        if($post){
            if(strtotime($post['start_time'])>strtotime($post['end_time'])){
                $info['status'] = 0;
                $info['msg'] = '开始时间不能大于结束时间';
                return($info);
            }
            $end_time= db('shop_time')->where(['shop_id'=>$this->shop_id])->order('time_id desc')->value('end_time');
            if(strtotime($post['start_time'])<strtotime($end_time)){
                $info['status'] = 0;
                $info['msg'] = '上条折扣结束时间为'.$end_time.'新记录必须大于'.$end_time;
                return($info);
            }
            $data['start_time']=$post['start_time'];
            $data['end_time']=$post['end_time'];
            $data['shop_id']=$this->shop_id;
            $data['sale']=$post['sale'];
            $res= db('shop_time')->insert($data);
            if ($res !== false){
                $info['status'] = 1;
                $info['msg'] = '设置成功';
            }else{
                $info['status'] = 0;
                $info['msg'] = '设置失败';
            }
            return($info);

        }
        echo $this->fetch('');
    }
    public function saledel(){
        $time_id = input('time_id');
        if (!$time_id) {
            $info['status'] = 0;
            $info['msg'] = 'ID不能为空!';
            return($info);
        }

        $where['time_id']=['in',$time_id];
        $list= db('goods_time')->where($where)->select();
        if($list){
            $info['status'] = 0;
            $info['msg'] = '该时间段绑定了商品，请先删除绑定商品在来删除该段时间';
            return($info);
        }
        $res = db('shop_time')->where($where)->delete();
        if ($res){
            $info['status'] = 1;
            $info['msg'] = '删除成功';
        }else{
            $info['status'] = 0;
            $info['msg'] = '删除失败';
        }
        return($info);
    }
    //弹出提示框
    public function goodshtml2(){
        $goods_id=  input('goods_id');
        $list=db('shop_time')->where(['shop_id'=>$this->shop_id])->select();
//        print_r($list);
        $this->assign('goods_id',$goods_id);
        $this->assign('list',$list);
        echo $this->fetch('');
        exit;
    }
    //批量商品修改折扣
    public function savegoodssale(){
        db()->startTrans();
        $goods_id= trim(input('goods_id'),',');
        $time_id= input('time_id');
        if(empty($time_id)){
            $info['status'] = 0;
            $info['msg'] = '时间段选择不能为空！';
            return($info);
        }

        $data=array();

        $where['goods_id']=['in',$goods_id];
        $list= db('goods')->where($where)->select();
               $find= db('shop_time')->where('time_id',$time_id)->find();
        foreach ($list as $k=>$v){
            $map['goods_id']=$v['goods_id'];
            $map['time_id']=$time_id;
            $map['shop_id']=$this->shop_id;
            $findtime= db('goods_time')->where($map)->find();
            if($findtime){
                $data1['sale']=$find['sale'];
                db('goods_time')->where('goods_time_id',$findtime['goods_time_id'])->update($data1);
                continue;
            }else{
                $data[$k]['goods_id']=$v['goods_id'];
                $data[$k]['shop_id']=$this->shop_id;
//                $data[$k]['start_time']=$find['start_time'];
//                $data[$k]['end_time']=$find['end_time'];
                $data[$k]['sale']=$find['sale'];
                $data[$k]['ctime']=time();
                $data[$k]['time_id']=$time_id;
            }
        }
        $res1=db('goods_time')->insertAll($data);
        if($res1){
            db()->commit();
            $info['status'] = 1;
            $info['msg'] = '修改成功！';

        }else{
            db()->rollback();
            $info['status'] = 0;
            $info['msg'] = '修改失败！';
        }
        return($info);

    }
    //绑定商品时间折扣表
    public function goodssalelist(){
        //设置面包导航，主加载器请配置
        $bread = array(
            '0' => array(
                'name' => '商品管理',
                'url' => url('shop/goods/index'),
            ),
            '1' => array(
                'name' => '商品折扣列表',
                'url' => url('shop/goods/salelist')
            ),
        );
        $this->assign('breadhtml', $this->getBread($bread));
        $pagesize = self::$MMS['set']['pagesize']?:20;
        $page = input('page')?input('page'):1;
        $title= trim(input('title'))?:'';
        if($title){
            $map['b.title']=['like',"%$title%"];
            $this->assign('title',$title);
        }
        $map['a.shop_id']=$this->shop_id;
        $lsit=db('goods_time')->alias('a')
            ->join('dlc_goods b','b.goods_id=a.goods_id','left')
            ->join('dlc_shop_time c','c.time_id=a.time_id','left')
            ->field('a.*,b.title,c.start_time,c.end_time')
            ->where($map)
            ->page($page,$pagesize)->select();
        $count=db('goods_time')->alias('a')
            ->join('dlc_goods b','b.goods_id=a.goods_id')
            ->join('dlc_shop_time c','c.time_id=a.time_id')
            ->where($map)->count();
        $this->getPage($count, $pagesize, 'App-loader', '商品时间折扣表', 'App-search');
        $this->assign('empty','<tr><td colspan="15" style="line-height:32px;text-align:center;">暂无数据！</td></tr>');
        $this->assign('list',$lsit);
        echo $this->fetch('');
    }
    //删除商品时间折扣表
    public function goodssaledel(){
        $goods_time_id = input('goods_time_id');
        if (!$goods_time_id) {
            $info['status'] = 0;
            $info['msg'] = 'ID不能为空!';
            return($info);
        }
        $where['goods_time_id']=['in',$goods_time_id];
        $res = db('goods_time')->where($where)->delete();
        if ($res){
            $info['status'] = 1;
            $info['msg'] = '删除成功';
        }else{
            $info['status'] = 0;
            $info['msg'] = '删除失败';
        }
        return($info);
    }

}